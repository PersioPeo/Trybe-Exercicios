{"ast":null,"code":"var _jsxFileName = \"/home/persiopeo/\\xC1rea de Trabalho/trybe/Trybe-Exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/app02/src/exercicio02/EstEvent3.js\";\nimport React from 'react';\n/**\n * Agora você vai converter sua aplicação para uma que conta o número de cliques dado em cada botão! Primeiramente, defina um estado inicial para a contagem de cada botão.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass EstEvent3 extends React.Component {\n  constructor() {\n    super();\n\n    this.mudaEstado = () => {\n      /* Passando uma callback à função setState, que recebe de parâmetros\n      o estado anterior e as props do componente, você garante que as atualizações\n      do estado acontecerão uma depois da outra! */\n      this.setState((estadoAnterio, _props) => ({\n        numeroDeCliques: estadoAnterio.numeroDeCliques + 1\n      }));\n    };\n\n    this.mudaEstado = this.mudaEstado.bind(this);\n    this.state = {\n      numeroDeCliques: 0\n    }; // fim do obj\n  } // fim do constructor\n\n\n  // fim da função mudaEstado\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.mudaEstado,\n        children: [\"Numero de Clicks \", this.state.numeroDeCliques]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } // fim do render\n\n\n} // fim EstEvent\n\n\nexport default EstEvent3;","map":{"version":3,"sources":["/home/persiopeo/Área de Trabalho/trybe/Trybe-Exercicios/front-end/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/app02/src/exercicio02/EstEvent3.js"],"names":["React","EstEvent3","Component","constructor","mudaEstado","setState","estadoAnterio","_props","numeroDeCliques","bind","state","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;;;;;AACA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,GAAI;AACX;;AADW,SAUfC,UAVe,GAUF,MAAM;AACf;AACR;AACA;AACQ,WAAKC,QAAL,CAAc,CAACC,aAAD,EAAgBC,MAAhB,MAA0B;AACpCC,QAAAA,eAAe,EAAEF,aAAa,CAACE,eAAd,GAA+B;AADZ,OAA1B,CAAd;AAKH,KAnBc;;AAGX,SAAKJ,UAAL,GAAkB,KAAKA,UAAL,CAAgBK,IAAhB,CAAqB,IAArB,CAAlB;AAGA,SAAKC,KAAL,GAAa;AACTF,MAAAA,eAAe,EAAE;AADR,KAAb,CANW,CAQT;AACL,GAVmC,CAUnC;;;AAUA;AACDG,EAAAA,MAAM,GAAI;AACR,wBACE;AAAA,6BACA;AAAQ,QAAA,OAAO,EAAE,KAAKP,UAAtB;AAAA,wCAAoD,KAAKM,KAAL,CAAWF,eAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,qBADF;AAKD,GA3BmC,CA2BlC;;;AA3BkC,C,CA4BtC;;;AACF,eAAeP,SAAf","sourcesContent":["import React from 'react';\n/**\n * Agora você vai converter sua aplicação para uma que conta o número de cliques dado em cada botão! Primeiramente, defina um estado inicial para a contagem de cada botão.\n */\nclass EstEvent3 extends React.Component {\n    constructor () {\n        super ()\n\n        this.mudaEstado = this.mudaEstado.bind(this);\n        \n\n        this.state = {\n            numeroDeCliques: 0\n        } // fim do obj\n    }// fim do constructor\n    mudaEstado = () => {\n        /* Passando uma callback à função setState, que recebe de parâmetros\n    o estado anterior e as props do componente, você garante que as atualizações\n    do estado acontecerão uma depois da outra! */\n        this.setState((estadoAnterio, _props)=>({\n            numeroDeCliques: estadoAnterio.numeroDeCliques +1 \n        }))\n    \n           \n    }// fim da função mudaEstado\n    render () {\n      return (\n        <>\n        <button onClick={this.mudaEstado}>Numero de Clicks {this.state.numeroDeCliques}</button>\n        </>\n      )\n    } // fim do render\n} // fim EstEvent\nexport default EstEvent3;"]},"metadata":{},"sourceType":"module"}